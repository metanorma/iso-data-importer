name: Daily ISO Data Update & Release

on:
  schedule:
    # Runs daily at 02:00 UTC (adjust as needed)
    - cron: "0 2 * * *"
  workflow_dispatch: # Allows manual triggering

jobs:
  update_data_and_release:
    name: Check ISO Data, Update, and Release if Changed
    runs-on: ubuntu-latest
    permissions:
      contents: write # To commit, tag, and push
      # packages: write # If publishing to GitHub Packages in the future

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          # Fetch enough history for version bumping tools if they rely on git tags
          fetch-depth: 0 # Fetches all history and tags

      - name: Configure Git User
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.1' # Specify your project's Ruby version
          bundler-cache: true

      - name: Run Rake task to update data
        id: update_data
        run: |
          echo "Updating ISO data using Rake..."
          # force_download=true, export_format=yaml (for committed data)
          bundle exec rake "data:update_all[true,yaml]"
          echo "Data update task finished."
          # Check if the data directory has changed
          if git diff --quiet HEAD -- data/; then
            echo "Data directory has no changes."
            echo "has_changes=false" >> $GITHUB_OUTPUT
          else
            echo "Data directory has changes."
            echo "has_changes=true" >> $GITHUB_OUTPUT
          fi

      - name: Commit and push data changes
        if: steps.update_data.outputs.has_changes == 'true'
        run: |
          echo "Committing data changes..."
          git add data/
          git commit -m "Update ISO open data files - $(date -u +'%Y-%m-%d %H:%M:%S UTC')"
          echo "Pushing data changes to branch..." # Pushes the data commit
          git push

      # This part mirrors the IETF example's direct gem release logic
      # If Metanorma has a reusable workflow for "bump, tag, commit version, publish",
      # that would be preferred here. For now, following IETF's direct approach:
      - name: Bump version, Tag, Commit Version, and Push Tags/Commits
        if: steps.update_data.outputs.has_changes == 'true'
        # Ensure gem-release is in your Gemfile's development group
        run: |
          echo "Data changed, proceeding with version bump and release preparation..."
          # Bump patch version, create git tag, commit version file, push commit & tag
          # The `--push` flag for `gem bump` pushes the commit and the tag.
          # Ensure your GITHUB_TOKEN (automatically provided to actions) has rights
          # or use a PAT if pushing to protected branches or triggering other workflows.
          bundle exec gem bump --version patch --tag --commit --push
          echo "Version bumped, tagged, and pushed."

      - name: Publish to RubyGems.org
        if: steps.update_data.outputs.has_changes == 'true'
        env:
          # This secret must be configured in your GitHub repository settings
          # Match the secret name used by Metanorma projects, e.g., METANORMA_CI_RUBYGEMS_API_KEY
          RUBYGEMS_API_KEY: ${{ secrets.METANORMA_CI_RUBYGEMS_API_KEY }}
        run: |
          echo "Publishing to RubyGems.org..."
          # The `gem bump` might have already built the gem if using `gem-release` fully.
          # If not, or to be sure:
          gem build *.gemspec
          gem push *.gem
          echo "Published to RubyGems.org."